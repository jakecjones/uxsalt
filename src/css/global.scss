$tablet-width: 768px;
$desktop-width: 1024px;

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}


// creaing mixin for margin and padding classes

@mixin styling($style, $direction, $shorthand, $i ) {
    .#{$shorthand}-#{$direction}-#{$i} {
        #{$style}-#{$direction}: #{$i}em;
    }
}

h1, h2, h3, h4 {
    margin: 0;
    padding: 0;
}

// defining a parent grid item
.col {
    margin: 0 auto;
    display: flex;
    align-items: flex-start;
}


// creating dynamic child grid elements
@for $i from 1 through 10 {
    .col-#{$i} {

        @include desktop {
            width: #{$i} + 0%;
        }
        @include tablet {
            width: #{$i} + 0%;
        }
        display: flex;
        display: flex;
        max-width: 100%;

        // uncomment color to test grid spacing
        // background-color: red;

        min-height: 1px;
        width: 100%;

    }
    .p-#{$i} {
        padding: #{$i}em;
    }
    .m-#{$i} {
        margin: #{$i} + 0em;
    }

    // defining parameter options for styling() mixin

    @include styling(margin, top, m, #{$i});
    @include styling(margin, right, m, #{$i});
    @include styling(margin, bottom, m, #{$i});
    @include styling(margin, left, m, #{$i});

    @include styling(padding, top, p, #{$i});
    @include styling(padding, right, p, #{$i});
    @include styling(padding, bottom, p, #{$i});
    @include styling(padding, left, p, #{$i});

}

// setting overides to native parent .col

.wrap {
    flex-flow: wrap;
}
.justify {
    justify-content: center;
    align-items: center;
}
.align-bottom {
    align-items: flex-end;
}



  