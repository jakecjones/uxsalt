$tablet-width: 768px;
$desktop-width: 1024px;

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}

@mixin mobile {
    @media (max-width: #{$tablet-width}) {
        @content;
      }
  }

// creaing mixin for margin and padding classes
@mixin styling($style, $direction, $shorthand, $i ) {
    .#{$shorthand}-#{$direction}-#{$i} {
        #{$style}-#{$direction}: #{$i}em;
    }
}

$resetInlineItems: h1, h2, h3, h4, p;

@each $inlineItem in $resetInlineItems {
    #{$inlineItem} {
        margin: 0;
        padding: 0;
    }
}

// defining a parent grid item
.container {
    margin: 0 auto;
    display: flex;
    align-items: flex-start;
}

// creating dynamic child grd elements
@for $i from 1 through 12 {

    @mixin grid($gridSizes, $screenSizes) {
        @each $size in $gridSizes {
            @each $screen in $screenSizes{

                .#{$size}-#{$i} {
                    @include #{$screen} {
                        width: #{100 / $i + '%'};
                        display: flex;
                        display: flex;
                        max-width: 100%;
                        min-height: 1px;   
                    }
                }
            }
        }
    }

    $gridSizes: sm, md, lg;
    $screenSizes: mobile, tablet, large;
    @include grid($gridSizes, $screenSizes);

    // defining parameter options for styling() mixin
    $directions: top, right, bottom, left;
    @each $item in $directions {
        @include styling(margin, $item, m, #{$i});
        @include styling(padding, $item, p, #{$i});
    }
}

// setting overides to native parent .container
.wrap {
    flex-flow: wrap;
}
.justify {
    justify-content: center;
    align-items: center;
}
.align-bottom {
    align-items: flex-end;
}
